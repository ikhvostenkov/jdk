#
# Copyright (c) 2011, 2015, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

# Configured Wed Apr 28 22:42:32 UTC 2021 to build
# for target system linux-x86_64
#   (called x86_64-unknown-linux-gnu by autoconf)
# on build system linux-x86_64
#   (called x86_64-unknown-linux-gnu by autoconf)
# using 'configure --with-boot-jdk=/lib/jvm/java-1.8.0/ --with-jvm-variants=core'

# When calling macros, the spaces between arguments are
# often semantically important! Sometimes we need to subst
# spaces and commas, therefore we need the following macros.
X:=
SPACE:=$(X) $(X)
COMMA:=,
DOLLAR:=$$
HASH:=\#
LEFT_PAREN:=(
RIGHT_PAREN:=)
SQUOTE:='
#'
DQUOTE:="
#"
define NEWLINE


endef

# The command line given to configure.
CONFIGURE_COMMAND_LINE:=--with-boot-jdk=/lib/jvm/java-1.8.0/ --with-jvm-variants=core

# A self-referential reference to this file.
SPEC:=/home/ec2-user/jdk/build/linux-x86_64-normal-core-release/spec.gmk

# What make to use for main processing, after bootstrapping top-level Makefile.
MAKE := /bin/gmake

# The default make arguments
MAKE_ARGS = $(MAKE_LOG_FLAGS) -r -R -I $(TOPDIR)/make/common SPEC=$(SPEC) \
    MAKE_LOG_FLAGS="$(MAKE_LOG_FLAGS)" LOG_LEVEL=$(LOG_LEVEL)

OUTPUT_SYNC_SUPPORTED:=true
OUTPUT_SYNC:=none

# Override the shell with bash
BASH:=/bin/bash
BASH_ARGS:= -o pipefail -e
SHELL:=$(BASH) $(BASH_ARGS)

# The "human readable" name of this configuration
CONF_NAME:=linux-x86_64-normal-core-release

# The built jdk will run in this target system.
OPENJDK_TARGET_OS:=linux
OPENJDK_TARGET_OS_TYPE:=unix
OPENJDK_TARGET_OS_ENV:=linux

OPENJDK_TARGET_CPU:=x86_64
OPENJDK_TARGET_CPU_ARCH:=x86
OPENJDK_TARGET_CPU_BITS:=64
OPENJDK_TARGET_CPU_ENDIAN:=little

COMPILE_TYPE:=native

# Legacy support
OPENJDK_TARGET_CPU_ISADIR:=
OPENJDK_TARGET_CPU_LIBDIR:=/amd64
OPENJDK_TARGET_CPU_LEGACY:=amd64
OPENJDK_TARGET_CPU_LEGACY_LIB:=amd64
OPENJDK_TARGET_CPU_OSARCH:=amd64
OPENJDK_TARGET_CPU_JLI_CFLAGS:=-DLIBARCHNAME='"amd64"'
OPENJDK_TARGET_OS_EXPORT_DIR:=unix

# We are building on this build system.
# When not cross-compiling, it is the same as the target.
OPENJDK_BUILD_OS:=linux
OPENJDK_BUILD_OS_TYPE:=unix
OPENJDK_BUILD_OS_ENV:=linux

OPENJDK_BUILD_CPU:=x86_64
OPENJDK_BUILD_CPU_ARCH:=x86
OPENJDK_BUILD_CPU_BITS:=64
OPENJDK_BUILD_CPU_ENDIAN:=little

# Legacy OS values for use in release file.
REQUIRED_OS_NAME:=Linux
REQUIRED_OS_VERSION:=2.6

OPENJDK=true
LIBM:=-lm
LIBDL:=-ldl 

# colon or semicolon
PATH_SEP:=:

# Save the original path before replacing it with the Visual Studio tools
ORIGINAL_PATH:=/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
ifeq ($(OPENJDK_TARGET_OS), windows)
  # On Windows, the Visual Studio toolchain needs the PATH to be adjusted
  # to include Visual Studio tools (this needs to be in cygwin/msys style).
  export PATH:=
endif

SYSROOT_CFLAGS := 
SYSROOT_LDFLAGS := 

# Paths to the source code
ADD_SRC_ROOT:=
OVERRIDE_SRC_ROOT:=

# The top-level directory of the forest (SRC_ROOT is a traditional alias)
TOPDIR:=/home/ec2-user/jdk
# These two versions of TOPDIR are used in string comparisons
ORIGINAL_TOPDIR:=/home/ec2-user/jdk
CANONICAL_TOPDIR:=/home/ec2-user/jdk
SRC_ROOT:=/home/ec2-user/jdk

OUTPUT_ROOT:=/home/ec2-user/jdk/build/linux-x86_64-normal-core-release
JDK_TOPDIR:=/home/ec2-user/jdk/jdk
LANGTOOLS_TOPDIR:=/home/ec2-user/jdk/langtools
CORBA_TOPDIR:=/home/ec2-user/jdk/corba
JAXP_TOPDIR:=/home/ec2-user/jdk/jaxp
JAXWS_TOPDIR:=/home/ec2-user/jdk/jaxws
HOTSPOT_TOPDIR:=/home/ec2-user/jdk/hotspot
NASHORN_TOPDIR:=/home/ec2-user/jdk/nashorn
COPYRIGHT_YEAR:=2021

# Information gathered from the version.numbers file.
JDK_MAJOR_VERSION:=1
JDK_MINOR_VERSION:=9
JDK_MICRO_VERSION:=0
JDK_UPDATE_VERSION:=
JDK_BUILD_NUMBER:=b00
MILESTONE:=internal
LAUNCHER_NAME:=openjdk
PRODUCT_NAME:=OpenJDK
PRODUCT_SUFFIX:=Runtime Environment
JDK_RC_PLATFORM_NAME:=Platform
COMPANY_NAME:=N/A
MACOSX_BUNDLE_NAME_BASE=OpenJDK
MACOSX_BUNDLE_ID_BASE=net.java.openjdk
USER_RELEASE_SUFFIX=root_2021_04_28_22_42

# Different version strings generated from the above information.
JDK_VERSION:=1.9.0
RUNTIME_NAME=$(PRODUCT_NAME) $(PRODUCT_SUFFIX)
COOKED_BUILD_NUMBER:=0
# These variables need to be generated here so that MILESTONE and
# JDK_BUILD_NUMBER can be overridden on the make command line.
ifeq ($(MILESTONE), fcs)
  RELEASE=$(JDK_VERSION)$(BUILD_VARIANT_RELEASE)
else
  RELEASE=$(JDK_VERSION)-$(MILESTONE)$(BUILD_VARIANT_RELEASE)
endif

ifneq ($(USER_RELEASE_SUFFIX), )
  FULL_VERSION=$(RELEASE)-$(USER_RELEASE_SUFFIX)-$(JDK_BUILD_NUMBER)
else
  FULL_VERSION=$(RELEASE)-$(JDK_BUILD_NUMBER)
endif
JRE_RELEASE_VERSION:=$(FULL_VERSION)
JDK_VERSION_FOR_MANIFEST := $(JDK_MINOR_VERSION).$(JDK_MICRO_VERSION).$(if $(JDK_UPDATE_VERSION),$(JDK_UPDATE_VERSION),0).$(COOKED_BUILD_NUMBER)

# How to compile the code: release, fastdebug or slowdebug
DEBUG_LEVEL:=release

# This is the JDK variant to build.
# The JDK variant is a name for a specific set of modules to be compiled for the JDK.
JDK_VARIANT:=normal

# Should we compile support for running with a graphical UI? (ie headful)
# Should we compile support for running without? (ie headless)
SUPPORT_HEADFUL:=yes
SUPPORT_HEADLESS:=yes
# Legacy defines controlled by the SUPPORT_HEADLESS and SUPPORT_HEADFUL options.
BUILD_HEADLESS:=true

# These are the libjvms that we want to build.
# The java launcher uses the default.
# The others can be selected by specifying -client -server -minimal1 -kernel -zero or -zeroshark
# on the java launcher command line.
JVM_VARIANTS:=,core,
JVM_VARIANT_SERVER:=false
JVM_VARIANT_CLIENT:=false
JVM_VARIANT_MINIMAL1:=false
JVM_VARIANT_KERNEL:=false
JVM_VARIANT_ZERO:=false
JVM_VARIANT_ZEROSHARK:=false
JVM_VARIANT_CORE:=true

# Universal binaries on macosx
MACOSX_UNIVERSAL=

# Legacy setting: -debug or -fastdebug
# Still used in version string...
BUILD_VARIANT_RELEASE:=

# JDK_OUTPUTDIR specifies where a working jvm is built.
# You can run $(JDK_OUTPUTDIR)/bin/java
# Though the layout of the contents of $(JDK_OUTPUTDIR) is not
# yet the same as a default installation.
#
# When you run "make install" it will create the standardized
# layout for the jdk and the jre inside the IMAGES_OUTPUTDIR subdir.
# Then it will copy the contents of the jdk into the installation
# directory.

BUILD_OUTPUT:=/home/ec2-user/jdk/build/linux-x86_64-normal-core-release
# Colon left out to be able to override IMAGES_OUTPUTDIR for bootcycle-images
SUPPORT_OUTPUTDIR=$(BUILD_OUTPUT)/support
BUILDTOOLS_OUTPUTDIR=$(BUILD_OUTPUT)/buildtools

HOTSPOT_OUTPUTDIR=$(BUILD_OUTPUT)/hotspot
JDK_OUTPUTDIR=$(BUILD_OUTPUT)/jdk
IMAGES_OUTPUTDIR=$(BUILD_OUTPUT)/images
TESTMAKE_OUTPUTDIR=$(BUILD_OUTPUT)/test-make
MAKESUPPORT_OUTPUTDIR=$(BUILD_OUTPUT)/make-support
# This does not get overridden in a bootcycle build
CONFIGURESUPPORT_OUTPUTDIR:=/home/ec2-user/jdk/build/linux-x86_64-normal-core-release/configure-support

HOTSPOT_DIST=/home/ec2-user/jdk/build/linux-x86_64-normal-core-release/hotspot/dist

BUILD_HOTSPOT=true

# The boot jdk to use. This is overridden in bootcycle-spec.gmk. Make sure to keep
# it in sync.
BOOT_JDK:=/lib/jvm/java-1.8.0

# When compiling Java source to be run by the boot jdk
# use these extra flags, eg -source 6 -target 6
BOOT_JDK_SOURCETARGET:=-source 8 -target 8

# Information about the build system
NUM_CORES:=1
MEMORY_SIZE:=805
# Enable sjavac support = use a javac server,
# multi core javac compilation and dependency tracking.
ENABLE_SJAVAC:=no
# Store sjavac server synchronization files here, and
# the sjavac server log files.
SJAVAC_SERVER_DIR=$(MAKESUPPORT_OUTPUTDIR)/javacservers

# Number of parallel jobs to use for compilation
JOBS?=1

FREETYPE_LIBS:=-lfreetype
FREETYPE_CFLAGS:=-I/usr/include/freetype2 -I/usr/include/libpng16 
FREETYPE_BUNDLE_LIB_PATH=
CUPS_CFLAGS:=
ALSA_LIBS:=-lasound 
ALSA_CFLAGS:=

PACKAGE_PATH=/opt/local

# Source file for cacerts
CACERTS_FILE=

# Enable unlimited crypto policy
UNLIMITED_CRYPTO=false

# Enable RMIConnector IIOP transport
RMICONNECTOR_IIOP=false

GCOV_ENABLED=false

# Necessary additional compiler flags to compile X11
X_CFLAGS:=
X_LIBS:=

# The lowest required version of macosx to enforce compatiblity for
MACOSX_VERSION_MIN=

# Toolchain type: gcc, clang, solstudio, lxc, microsoft...
TOOLCHAIN_TYPE:=gcc

# Option used to tell the compiler whether to create 32- or 64-bit executables
COMPILER_TARGET_BITS_FLAG:=-m
COMPILER_SUPPORTS_TARGET_BITS_FLAG=true

CC_OUT_OPTION:=-o$(SPACE)
EXE_OUT_OPTION:=-o$(SPACE)
LD_OUT_OPTION:=-o$(SPACE)
AR_OUT_OPTION:=rcs$(SPACE)

# Flags used for overriding the default opt setting for a C/C++ source file.
C_O_FLAG_HIGHEST:=-O3
C_O_FLAG_HI:=-O3
C_O_FLAG_NORM:=-O2
C_O_FLAG_NONE:=-O0
CXX_O_FLAG_HIGHEST:=-O3
CXX_O_FLAG_HI:=-O3
CXX_O_FLAG_NORM:=-O2
CXX_O_FLAG_NONE:=-O0

C_FLAG_DEPS:=-MMD -MF
CXX_FLAG_DEPS:=-MMD -MF

DISABLE_WARNING_PREFIX := -Wno-
CFLAGS_WARNINGS_ARE_ERRORS:=-Werror

# A global flag (true or false) determining if native warnings are considered errors.
WARNINGS_AS_ERRORS := true

CFLAGS_CCACHE:=

# Tools that potentially need to be cross compilation aware.
CC:=  /bin/gcc

# CFLAGS used to compile the jdk native libraries (C-code)
CFLAGS_JDKLIB:=  -Wall -Wextra -Wno-unused -Wno-unused-parameter -Wformat=2         -pipe -D_GNU_SOURCE -D_REENTRANT -D_LARGEFILE64_SOURCE -fno-omit-frame-pointer -D_LP64=1 -D_LITTLE_ENDIAN -DLINUX -DARCH='"amd64"' -Damd64 -DNDEBUG -DRELEASE='"$(RELEASE)"'       -I/home/ec2-user/jdk/jdk/src/java.base/share/native/include       -I/home/ec2-user/jdk/jdk/src/java.base/linux/native/include       -I/home/ec2-user/jdk/jdk/src/java.base/unix/native/include   -fno-strict-aliasing -fPIC 
CXXFLAGS_JDKLIB:=  -Wall -Wextra -Wno-unused -Wno-unused-parameter -Wformat=2         -pipe -D_GNU_SOURCE -D_REENTRANT -D_LARGEFILE64_SOURCE -fno-omit-frame-pointer -D_LP64=1 -D_LITTLE_ENDIAN -DLINUX -DARCH='"amd64"' -Damd64 -DNDEBUG -DRELEASE='"$(RELEASE)"'       -I/home/ec2-user/jdk/jdk/src/java.base/share/native/include       -I/home/ec2-user/jdk/jdk/src/java.base/linux/native/include       -I/home/ec2-user/jdk/jdk/src/java.base/unix/native/include   -fPIC 

# CFLAGS used to compile the jdk native launchers (C-code)
CFLAGS_JDKEXE:=  -Wall -Wextra -Wno-unused -Wno-unused-parameter -Wformat=2         -pipe -D_GNU_SOURCE -D_REENTRANT -D_LARGEFILE64_SOURCE -fno-omit-frame-pointer -D_LP64=1 -D_LITTLE_ENDIAN -DLINUX -DARCH='"amd64"' -Damd64 -DNDEBUG -DRELEASE='"$(RELEASE)"'       -I/home/ec2-user/jdk/jdk/src/java.base/share/native/include       -I/home/ec2-user/jdk/jdk/src/java.base/linux/native/include       -I/home/ec2-user/jdk/jdk/src/java.base/unix/native/include   -fno-strict-aliasing
CXXFLAGS_JDKEXE:=  -Wall -Wextra -Wno-unused -Wno-unused-parameter -Wformat=2         -pipe -D_GNU_SOURCE -D_REENTRANT -D_LARGEFILE64_SOURCE -fno-omit-frame-pointer -D_LP64=1 -D_LITTLE_ENDIAN -DLINUX -DARCH='"amd64"' -Damd64 -DNDEBUG -DRELEASE='"$(RELEASE)"'       -I/home/ec2-user/jdk/jdk/src/java.base/share/native/include       -I/home/ec2-user/jdk/jdk/src/java.base/linux/native/include       -I/home/ec2-user/jdk/jdk/src/java.base/unix/native/include  

CXX:=  /bin/g++
#CXXFLAGS:= -I/usr/include/freetype2 -I/usr/include/libpng16 

CPP:= /bin/gcc -E
#CPPFLAGS:=

# The linker can be gcc or ld on unix systems, or link.exe on windows systems.
LD:= /bin/gcc

# Xcode SDK path
SDKROOT:=

# The linker on older SuSE distros (e.g. on SLES 10) complains with:
# "Invalid version tag `SUNWprivate_1.1'. Only anonymous version tag is allowed in executable."
# if feeded with a version script which contains named tags.
USING_BROKEN_SUSE_LD:=no

# LDFLAGS used to link the jdk native libraries (C-code)
LDFLAGS_JDKLIB:=  -Xlinker --hash-style=both -Xlinker -z -Xlinker defs -Xlinker -O1  -shared         -L/home/ec2-user/jdk/build/linux-x86_64-normal-core-release/support/modules_libs/java.base/amd64 -L/home/ec2-user/jdk/build/linux-x86_64-normal-core-release/support/modules_libs/java.base/amd64/server
LDFLAGS_JDKLIB_SUFFIX:=-ljava -ljvm

# LDFLAGS used to link the jdk native launchers (C-code)
LDFLAGS_JDKEXE:=  -Xlinker --hash-style=both -Xlinker -z -Xlinker defs -Xlinker -O1 -Xlinker --allow-shlib-undefined
LDFLAGS_JDKEXE_SUFFIX:=

# LDFLAGS specific to C++ linking.
LDFLAGS_CXX_JDK:=

# Sometimes a different linker is needed for c++ libs
LDCXX:= /bin/g++
# The flags for linking libstdc++ linker.
LIBCXX:= -lstdc++

# Compiler and linker flags used when building native tests
CFLAGS_TESTLIB:=  -Wall -Wextra -Wno-unused -Wno-unused-parameter -Wformat=2         -pipe -D_GNU_SOURCE -D_REENTRANT -D_LARGEFILE64_SOURCE -fno-omit-frame-pointer -D_LP64=1 -D_LITTLE_ENDIAN -DLINUX -DARCH='"amd64"' -Damd64 -DNDEBUG -DRELEASE='"$(RELEASE)"'       -I/home/ec2-user/jdk/jdk/src/java.base/share/native/include       -I/home/ec2-user/jdk/jdk/src/java.base/linux/native/include       -I/home/ec2-user/jdk/jdk/src/java.base/unix/native/include   -fno-strict-aliasing -fPIC 
CXXFLAGS_TESTLIB:=  -Wall -Wextra -Wno-unused -Wno-unused-parameter -Wformat=2         -pipe -D_GNU_SOURCE -D_REENTRANT -D_LARGEFILE64_SOURCE -fno-omit-frame-pointer -D_LP64=1 -D_LITTLE_ENDIAN -DLINUX -DARCH='"amd64"' -Damd64 -DNDEBUG -DRELEASE='"$(RELEASE)"'       -I/home/ec2-user/jdk/jdk/src/java.base/share/native/include       -I/home/ec2-user/jdk/jdk/src/java.base/linux/native/include       -I/home/ec2-user/jdk/jdk/src/java.base/unix/native/include   -fPIC 
CFLAGS_TESTEXE:=  -Wall -Wextra -Wno-unused -Wno-unused-parameter -Wformat=2         -pipe -D_GNU_SOURCE -D_REENTRANT -D_LARGEFILE64_SOURCE -fno-omit-frame-pointer -D_LP64=1 -D_LITTLE_ENDIAN -DLINUX -DARCH='"amd64"' -Damd64 -DNDEBUG -DRELEASE='"$(RELEASE)"'       -I/home/ec2-user/jdk/jdk/src/java.base/share/native/include       -I/home/ec2-user/jdk/jdk/src/java.base/linux/native/include       -I/home/ec2-user/jdk/jdk/src/java.base/unix/native/include   -fno-strict-aliasing
CXXFLAGS_TESTEXE:=  -Wall -Wextra -Wno-unused -Wno-unused-parameter -Wformat=2         -pipe -D_GNU_SOURCE -D_REENTRANT -D_LARGEFILE64_SOURCE -fno-omit-frame-pointer -D_LP64=1 -D_LITTLE_ENDIAN -DLINUX -DARCH='"amd64"' -Damd64 -DNDEBUG -DRELEASE='"$(RELEASE)"'       -I/home/ec2-user/jdk/jdk/src/java.base/share/native/include       -I/home/ec2-user/jdk/jdk/src/java.base/linux/native/include       -I/home/ec2-user/jdk/jdk/src/java.base/unix/native/include  
LDFLAGS_TESTLIB:=  -Xlinker --hash-style=both -Xlinker -z -Xlinker defs -Xlinker -O1  -shared         -L/home/ec2-user/jdk/build/linux-x86_64-normal-core-release/support/modules_libs/java.base/amd64 -L/home/ec2-user/jdk/build/linux-x86_64-normal-core-release/support/modules_libs/java.base/amd64/server
LDFLAGS_TESTLIB_SUFFIX:=-ljava -ljvm
LDFLAGS_TESTEXE:=  -Xlinker --hash-style=both -Xlinker -z -Xlinker defs -Xlinker -O1 -Xlinker --allow-shlib-undefined
LDFLAGS_TESTEXE_SUFFIX:=

# BUILD_CC/BUILD_LD is a compiler/linker that generates code that is runnable on the
# build platform.
BUILD_CC:= /bin/gcc
BUILD_LD:= /bin/gcc

AS:= /bin/gcc -c

# AR is used to create a static library (is ar in unix, lib.exe in windows)
AR:= /bin/ar
ARFLAGS:=

NM:=/bin/nm
GNM:=/bin/nm
STRIP:=/bin/strip

LIPO:=

# Options to linker to specify a mapfile.
# (Note absence of := assignment, because we do not want to evaluate the macro body here)
SET_SHARED_LIBRARY_MAPFILE=-Xlinker -version-script=$1

# Options for C/CXX compiler to be used if linking is performed
#   using reorder file
C_FLAG_REORDER:=
CXX_FLAG_REORDER:=

#
# Options for generating debug symbols
ENABLE_DEBUG_SYMBOLS:=true
CFLAGS_DEBUG_SYMBOLS:=-g
CXXFLAGS_DEBUG_SYMBOLS:=-g
ZIP_DEBUGINFO_FILES:=true

#
# Compress (or not) jars
COMPRESS_JARS=false

# Options to linker to specify the library name.
# (Note absence of := assignment, because we do not want to evaluate the macro body here)
SET_SHARED_LIBRARY_NAME=-Xlinker -soname=$1

# Set origin using the linker, ie use the relative path to the dependent library to find the dependees.
# (Note absence of := assignment, because we do not want to evaluate the macro body here)
SET_SHARED_LIBRARY_ORIGIN=-Xlinker -z -Xlinker origin -Xlinker -rpath -Xlinker \$$$$ORIGIN$1
SET_EXECUTABLE_ORIGIN=-Xlinker -rpath -Xlinker \$$$$ORIGIN$1

# Different OS:es have different ways of naming shared libraries.
# The SHARED_LIBRARY macro takes "verify" as and argument and returns:
#    "libverify.so" or "libverify.dylib" or "verify.dll" depending on platform.
# (Note absence of := assignment, because we do not want to evaluate the macro body here)
SHARED_LIBRARY=lib$1.so
STATIC_LIBRARY=lib$1.a
LIBRARY_PREFIX:=lib
SHARED_LIBRARY_SUFFIX:=.so
STATIC_LIBRARY_SUFFIX:=.a
EXE_SUFFIX:=
OBJ_SUFFIX:=.o

POST_STRIP_CMD:=/bin/strip -g

JAVA_FLAGS:= 
JAVA_FLAGS_BIG:= -Xms64M -Xmx512M -XX:ThreadStackSize=1536
JAVA_FLAGS_SMALL:= -XX:+UseSerialGC -Xms32M -Xmx512M
JAVA_TOOL_FLAGS_SMALL:= -J-XX:+UseSerialGC -J-Xms32M -J-Xmx512M
SJAVAC_SERVER_JAVA_FLAGS:= -Xms256M -Xmx512M

# The *_CMD variables are defined separately to be easily overridden in bootcycle-spec.gmk
# for bootcycle-images build. Make sure to keep them in sync. Do not use the *_CMD
# versions of the variables directly.
JAVA_CMD:=/lib/jvm/java-1.8.0/bin/java
JAVAC_CMD:=/lib/jvm/java-1.8.0/bin/javac
JAVAH_CMD:=/lib/jvm/java-1.8.0/bin/javah
JAR_CMD:=/lib/jvm/java-1.8.0/bin/jar
JARSIGNER_CMD:=/lib/jvm/java-1.8.0/bin/jarsigner
SJAVAC_SERVER_JAVA_CMD:=/lib/jvm/java-1.8.0/bin/java
# These variables are meant to be used. They are defined with = instead of := to make
# it possible to override only the *_CMD variables.
JAVA= $(JAVA_CMD) $(JAVA_FLAGS_BIG) $(JAVA_FLAGS)
JAVA_SMALL= $(JAVA_CMD) $(JAVA_FLAGS_SMALL) $(JAVA_FLAGS)
JAVAC= $(JAVAC_CMD)
JAVAH= $(JAVAH_CMD)
JAR= $(JAR_CMD)
JARSIGNER= $(JARSIGNER_CMD)
# A specific java binary with specific options can be used to run
# the long running background sjavac servers and other long running tasks.
SJAVAC_SERVER_JAVA= $(SJAVAC_SERVER_JAVA_CMD) $(SJAVAC_SERVER_JAVA_FLAGS)

# Hotspot sets this variable before reading the SPEC when compiling sa-jdi.jar. Avoid
# overriding that value by using ?=.
JAVAC_FLAGS?=

# You run the new javac using the boot jdk with $(BOOT_JDK)/bin/java $(NEW_JAVAC) ...
# Use = assignment to be able to override in bootcycle-spec.gmk
INTERIM_LANGTOOLS_JAR = $(BUILDTOOLS_OUTPUTDIR)/interim_langtools.jar
INTERIM_LANGTOOLS_ARGS = "-Xbootclasspath/p:$(INTERIM_LANGTOOLS_JAR)" -cp $(INTERIM_LANGTOOLS_JAR)
NEW_JAVAC   = $(INTERIM_LANGTOOLS_ARGS) com.sun.tools.javac.Main
NEW_JAVADOC = $(INTERIM_LANGTOOLS_ARGS) com.sun.tools.javadoc.Main

# The interim corba jar is needed for running rmic
INTERIM_CORBA_JAR = $(BUILDTOOLS_OUTPUTDIR)/interim_corba.jar

# Base flags for RC
# Guarding this against resetting value. Legacy make files include spec multiple
# times.
ifndef RC_FLAGS
  RC_FLAGS:=
endif

# Tools adhering to a minimal and common standard of posix compliance.
AWK:=gawk
BASENAME:=/bin/basename
CAT:=/bin/cat
CCACHE:=
# CD is going away, but remains to cater for legacy makefiles.
CD:=cd
CHMOD:=/bin/chmod
CODESIGN:=
COMM:=/bin/comm
CP:=/bin/cp
CPIO:=/bin/cpio
CUT:=/bin/cut
DATE:=/bin/date
DIFF:=/bin/diff
DIRNAME:=/bin/dirname
DSYMUTIL:=
FIND:=/bin/find
FIND_DELETE:=-delete
ECHO:=/bin/echo
EGREP:=/bin/grep -E
FGREP:=/bin/grep -F
GREP:=/bin/grep
HEAD:=/bin/head
LS:=/bin/ls
LN:=/bin/ln
MKDIR:=/bin/mkdir
MV:=/bin/mv
NAWK:=/bin/gawk
PRINTF:=/bin/printf
PWD:=@THEPWDCMD@
RM:=/bin/rm -f
SED:=/bin/sed
SH:=/bin/sh
SORT:=/bin/sort
TAR:=/bin/tar
TAIL:=/bin/tail
TEE:=/bin/tee
TIME:=
IS_GNU_TIME:=no
TR:=/bin/tr
TOUCH:=/bin/touch
UNIQ:=/bin/uniq
WC:=/bin/wc
XARGS:=/bin/xargs
ZIPEXE:=/bin/zip
ZIP:=/bin/zip
UNZIP:=/bin/unzip
MT:= 
RC:= 
DUMPBIN:= 
CYGPATH:=
LDD:=/bin/ldd
OTOOL:=true
READELF:=/bin/readelf
EXPR:=/bin/expr
FILE:=/bin/file
HG:=
OBJCOPY:=/bin/objcopy
SETFILE:=
XATTR:=
JT_HOME:=
JTREGEXE:=
XCODEBUILD=
FIXPATH:=

# Build setup
ENABLE_JFR=@ENABLE_JFR@
ENABLE_INTREE_EC=yes
USE_EXTERNAL_LIBJPEG:=false
USE_EXTERNAL_LIBGIF:=false
USE_EXTERNAL_LIBZ:=false
LIBZIP_CAN_USE_MMAP:=true
MSVCR_DLL:=
MSVCP_DLL:=


# ADD_SRCS takes a single argument with source roots
# and appends any corresponding source roots found
# below --with-add-source-root and below
# --with-override-source-root. It is the responsibility
# of the next macro to get rid of superfluous files.
ADD_SRCS=$1
ifneq (,$(ADD_SRC_ROOT))
  # Append wildcard rule to pickup any matching source roots found below ADD_SRC_ROOT
  ADD_SRCS+=$(wildcard $(subst $(SRC_ROOT),$(ADD_SRC_ROOT),$1))
endif
ifneq (,$(OVERRIDE_SRC_ROOT))
  # Append wildcard rule to pickup any matching source roots found below OVERRIDE_SRC_ROOT
  ADD_SRCS+=$(wildcard $(subst $(SRC_ROOT),$(OVERRIDE_SRC_ROOT),$1))
endif

# OVR_SRCS creates a filter expression to filter out sources in
# the original source directory that lie inside directories below
# --with-override-source-root.
# Use := here since we want to scan for these files here. To avoid recomputation later.
# We cannot do the scan in configure, since that would force us to rerun configure when
# we add overridden sources.
ifneq (,$(OVERRIDE_SRC_ROOT))
  OVR_SRCS:=$(addsuffix %,$(subst $(OVERRIDE_SRC_ROOT),$(SRC_ROOT),$(sort $(dir $(shell $(FIND) $(OVERRIDE_SRC_ROOT) -type f)))))
else
  OVR_SRCS:=
endif

####################################################
#
# INSTALLATION
#

# Common prefix for all installed files. Defaults to /usr/local,
# but /opt/myjdk is another common version.
INSTALL_PREFIX=/usr/local

# Directories containing architecture-dependent files should be relative to exec_prefix
INSTALL_EXECPREFIX=${prefix}

# java,javac,javah,javap etc are installed here.
INSTALL_BINDIR=${exec_prefix}/bin

# Read only architecture-independent data
INSTALL_DATADIR=${datarootdir}

# Root of above.
INSTALL_DATAROOTDIR=${prefix}/share

# Doc files, other than info and man.
INSTALL_DOCDIR=${datarootdir}/doc/${PACKAGE_TARNAME}

# Html documentation
INSTALL_HTMLDIR=${docdir}

# Installing C header files, JNI headers for example.
INSTALL_INCLUDEDIR=${prefix}/include

# Installing library files....
INSTALL_INCLUDEDIR=${exec_prefix}/lib

# Executables that other programs run.
INSTALL_LIBEXECDIR=${exec_prefix}/libexec

# Locale-dependent but architecture-independent data, such as message catalogs.
INSTALL_LOCALEDIR=${datarootdir}/locale

# Modifiable single-machine data
INSTALL_LOCALSTATEDIR=${prefix}/var

# Man pages
INSTALL_MANDIR=${datarootdir}/man

# Modifiable architecture-independent data.
INSTALL_SHAREDSTATEDIR=${prefix}/com

# Read-only single-machine data
INSTALL_SYSCONFDIR=${prefix}/etc

####################################################
#
# Libraries
#

USE_EXTERNAL_LCMS:=false
LCMS_CFLAGS:=
LCMS_LIBS:=

USE_EXTERNAL_LIBPNG:=false
PNG_LIBS:=
PNG_CFLAGS:=


####################################################
#
# Misc
#

# Name of Service Agent library
SALIB_NAME=libsaproc.so

INCLUDE_SA=true

OS_VERSION_MAJOR:=4
OS_VERSION_MINOR:=18
OS_VERSION_MICRO:=0

# Images directory definitions
JDK_IMAGE_SUBDIR:=jdk
JRE_IMAGE_SUBDIR:=jre

# Colon left out to be able to override output dir for bootcycle-images
JDK_IMAGE_DIR=$(IMAGES_OUTPUTDIR)/$(JDK_IMAGE_SUBDIR)
JRE_IMAGE_DIR=$(IMAGES_OUTPUTDIR)/$(JRE_IMAGE_SUBDIR)

# Test image, as above
TEST_IMAGE_SUBDIR:=test
TEST_IMAGE_DIR=$(IMAGES_OUTPUTDIR)/$(TEST_IMAGE_SUBDIR)

# Symbols image
SYMBOLS_IMAGE_SUBDIR:=symbols
SYMBOLS_IMAGE_DIR=$(IMAGES_OUTPUTDIR)/$(SYMBOLS_IMAGE_SUBDIR)

# Macosx bundles directory definitions
JDK_MACOSX_BUNDLE_SUBDIR=jdk-bundle/jdk$(JDK_VERSION).jdk/Contents
JRE_MACOSX_BUNDLE_SUBDIR=jre-bundle/jre$(JDK_VERSION).jre/Contents
JDK_MACOSX_BUNDLE_DIR=$(IMAGES_OUTPUTDIR)/$(JDK_MACOSX_BUNDLE_SUBDIR)
JRE_MACOSX_BUNDLE_DIR=$(IMAGES_OUTPUTDIR)/$(JRE_MACOSX_BUNDLE_SUBDIR)

# This macro is called to allow inclusion of closed source counterparts.
# Unless overridden in closed sources, it expands to nothing.
# Usage: This function is called in an open makefile, with the following
# arguments:
# $1 the name of the repo, or empty if the top-level repo.
# $2 the name of the makefile
define IncludeCustomExtension
endef

# Include the custom-spec.gmk file if it exists
-include $(dir /home/ec2-user/jdk/build/linux-x86_64-normal-core-release/spec.gmk)/custom-spec.gmk
